#!/usr/bin/python
#
# This file is part of edledit.
# Copyright (C) 2010 Stephane Bidoul
#
# edledit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# edledit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with edledit.  If not, see <http://www.gnu.org/licenses/>.

__version__ = "1.0"

import sys, os, subprocess
from optparse import OptionParser
from shutil import move

import pyedl

#def _td2sec(td):
#   return td.days*86400+td.seconds+td.microseconds/1000000.

def _td2hms(td):
    hours, remainder = divmod(td.seconds, 3600)
    hours = td.days*24 + hours
    minutes, seconds = divmod(remainder, 60)
    return "%02d:%02d:%02d.%06d" % (hours, minutes, seconds, td.microseconds)

def getSplitTimeCodes(edl):
    l = []
    for block in edl:
        if block.startTime:
            #l.append("%fs" % _td2sec(block.startTime))
            l.append(_td2hms(block.startTime))
        if block.stopTime:
            #l.append("%fs" % _td2sec(block.stopTime))
            l.append(_td2hms(block.stopTime))
    return "timecodes:" + ",".join(l)

def getSplitNumbers(edl):
    i = 0
    l = []
    for block in edl:
        if block.startTime:
            # include chunk before block, unless block starts at 0
            i += 1
            l.append((i,True))
        # exclude chunk corresponding to block
        i += 1
        l.append((i,False))
    # include chunk after last block (this chunk may not exist
    # is last block spans until end of file, but we don't know since
    # we don't have the file duration here)
    i += 1
    l.append((i,True))
    return l

inputFileName = os.path.abspath(sys.argv[1])

if not inputFileName:
    parser.error("missing INPUT")
    sys.exit(1)
edlFileName = os.path.splitext(inputFileName)[0] + ".edl"

if not os.path.exists(inputFileName):
    parser.error("input file %s does not exist" % inputFileName)
    sys.exit(1)
if not os.path.exists(edlFileName):
    parser.error("EDL file %s does not exist" % edlFileName)
    sys.exit(1)
outputFileName = os.path.basename(inputFileName)

# load EDL
edl = pyedl.load(open(edlFileName))
edl.validate()
edl.normalize()

# split
args = ["mkvmerge", "-o", "/tmp/%s" % outputFileName,
        "--split", getSplitTimeCodes(edl),
        inputFileName]
print " ".join(args)
r = subprocess.call(args)
if r != 0:
    sys.exit(r)

# merge
outf = os.path.splitext(outputFileName)
args = ["mkvmerge", "-o", "/tmp/%s" % outputFileName]
first = True
for i, keep in getSplitNumbers(edl):
    if keep:
        inf = "/tmp/%s-%03d%s" % (outf[0], i, outf[1])
        if os.path.exists(inf):
            # inf may not exist if it is last chunk and last cut 
            # spanned until end of file
            if first:
                first = False
                args.append(inf)
            else:
                args.append("+" + inf)
print " ".join(args)
r = subprocess.call(args)
if r != 0:
    sys.exit(r)

# delete temp files
outf = os.path.splitext(outputFileName)
for i, keep in getSplitNumbers(edl):
    inf = "/tmp/%s-%03d%s" % (outf[0], i, outf[1])
    if os.path.exists(inf):
        os.remove(inf)
move("/tmp/%s" % outputFileName, inputFileName)
os.remove(edlFileName)

